version: '3.8'

services:
  # PostgreSQL Database with Vector Extensions
  postgres:
    image: pgvector/pgvector:pg15
    container_name: agentos-postgres
    environment:
      POSTGRES_DB: agentos_dev
      POSTGRES_USER: agentos
      POSTGRES_PASSWORD: agentos_dev_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - agentos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentos -d agentos_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Queues
  redis:
    image: redis:7-alpine
    container_name: agentos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS for Message Streaming
  nats:
    image: nats:2.10-alpine
    container_name: agentos-nats
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    command: ["--jetstream", "--store_dir=/data", "--http_port=8222"]
    volumes:
      - nats_data:/data
    networks:
      - agentos-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: agentos-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - agentos-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Minio for Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: agentos-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: agentos
      MINIO_ROOT_PASSWORD: agentos_dev_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - agentos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: agentos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agentos-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agentos-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: agentos_dev_password
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agentos-network
    depends_on:
      - prometheus

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: agentos-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - agentos-network

  # Core API Service (Go)
  core-api:
    build:
      context: ./core/api
      dockerfile: Dockerfile.dev
    container_name: agentos-core-api
    ports:
      - "8000:8000"
    environment:
      - GO_ENV=development
      - DATABASE_URL=postgres://agentos:agentos_dev_password@postgres:5432/agentos_dev?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - NATS_URL=nats://nats:4222
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=agentos
      - MINIO_SECRET_KEY=agentos_dev_password
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./core/api:/app
      - go_mod_cache:/go/pkg/mod
    networks:
      - agentos-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent Engine Service (Go) - Week 3+
  # agent-engine:
  #   build:
  #     context: ./core/agent-engine
  #     dockerfile: Dockerfile.dev
  #   container_name: agentos-agent-engine
  #   ports:
  #     - "8001:8001"
  #   environment:
  #     - GO_ENV=development
  #     - DATABASE_URL=postgres://agentos:agentos_dev_password@postgres:5432/agentos_dev?sslmode=disable
  #     - REDIS_URL=redis://redis:6379/1
  #     - NATS_URL=nats://nats:4222
  #     - CORE_API_URL=http://core-api:8000
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
  #   volumes:
  #     - ./core/agent-engine:/app
  #     - go_mod_cache:/go/pkg/mod
  #   networks:
  #     - agentos-network
  #   depends_on:
  #     - core-api
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Memory Service (Go) - Week 3+
  # memory-service:
  #   build:
  #     context: ./platform/services/memory-service
  #     dockerfile: Dockerfile.dev
  #   container_name: agentos-memory-service
  #   ports:
  #     - "8002:8002"
  #   environment:
  #     - GO_ENV=development
  #     - DATABASE_URL=postgres://agentos:agentos_dev_password@postgres:5432/agentos_dev?sslmode=disable
  #     - REDIS_URL=redis://redis:6379/2
  #     - ELASTICSEARCH_URL=http://elasticsearch:9200
  #     - PINECONE_API_KEY=${PINECONE_API_KEY}
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #   volumes:
  #     - ./platform/services/memory-service:/app
  #     - go_mod_cache:/go/pkg/mod
  #   networks:
  #     - agentos-network
  #   depends_on:
  #     - core-api
  #     - elasticsearch
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Tool Registry Service (Go) - Week 3+
  # tool-registry:
  #   build:
  #     context: ./platform/services/tool-registry
  #     dockerfile: Dockerfile.dev
  #   container_name: agentos-tool-registry
  #   ports:
  #     - "8003:8003"
  #   environment:
  #     - GO_ENV=development
  #     - DATABASE_URL=postgres://agentos:agentos_dev_password@postgres:5432/agentos_dev?sslmode=disable
  #     - REDIS_URL=redis://redis:6379/3
  #     - MINIO_ENDPOINT=minio:9000
  #     - MINIO_ACCESS_KEY=agentos
  #     - MINIO_SECRET_KEY=agentos_dev_password
  #   volumes:
  #     - ./platform/services/tool-registry:/app
  #     - go_mod_cache:/go/pkg/mod
  #   networks:
  #     - agentos-network
  #   depends_on:
  #     - core-api
  #     - minio
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Development Hot Reload (Air)
  dev-watcher:
    image: golang:1.21-alpine
    container_name: agentos-dev-watcher
    working_dir: /workspace
    volumes:
      - .:/workspace
      - go_mod_cache:/go/pkg/mod
    command: |
      sh -c "
        go install github.com/air-verse/air@latest &&
        air -c .air.toml
      "
    networks:
      - agentos-network
    depends_on:
      - postgres
      - redis
      - nats

volumes:
  postgres_data:
  redis_data:
  nats_data:
  elasticsearch_data:
  minio_data:
  prometheus_data:
  grafana_data:
  go_mod_cache:

networks:
  agentos-network:
    driver: bridge